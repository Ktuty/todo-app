package main

import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/streadway/amqp"
)

func testAction(action string, data map[string]interface{}) {
	conn, err := amqp.Dial("amqp://admin:password@localhost:5672/")
	if err != nil {
		log.Fatal("Failed to connect to RabbitMQ:", err)
	}
	defer conn.Close()

	ch, err := conn.Channel()
	if err != nil {
		log.Fatal("Failed to open channel:", err)
	}
	defer ch.Close()

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
	replyQueue, err := ch.QueueDeclare(
		"", false, true, true, false, nil,
	)
	if err != nil {
		log.Fatal("Failed to declare reply queue:", err)
	}

	// –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã
	msgs, err := ch.Consume(
		replyQueue.Name, "", true, false, false, false, nil,
	)
	if err != nil {
		log.Fatal("Failed to consume responses:", err)
	}

	timestamp := time.Now().Unix()
	request := map[string]interface{}{
		"id":      fmt.Sprintf("test-%d", timestamp),
		"version": "v1",
		"action":  action,
		"data":    data,
		"auth":    "todo-app-api-key-12345",
	}

	body, _ := json.Marshal(request)
	correlationID := fmt.Sprintf("test-%d", timestamp)

	fmt.Printf("\nüöÄ Testing action: %s\n", action)
	fmt.Printf("   Correlation ID: %s\n", correlationID)

	err = ch.Publish(
		"", "api.requests", false, false,
		amqp.Publishing{
			ContentType:   "application/json",
			CorrelationId: correlationID,
			ReplyTo:       replyQueue.Name,
			Body:          body,
			Timestamp:     time.Now(),
		},
	)
	if err != nil {
		log.Fatal("Failed to publish message:", err)
	}

	select {
	case msg := <-msgs:
		var response map[string]interface{}
		json.Unmarshal(msg.Body, &response)

		if response["status"] == "success" {
			fmt.Printf("   ‚úÖ SUCCESS: %s completed\n", action)
			if data, ok := response["data"].(map[string]interface{}); ok {
				for k, v := range data {
					fmt.Printf("      %s: %v\n", k, v)
				}
			}
		} else {
			fmt.Printf("   ‚ùå ERROR in %s: %v\n", action, response["error"])
		}

	case <-time.After(10 * time.Second):
		fmt.Printf("   ‚è∞ TIMEOUT: %s\n", action)
	}
}

func main() {
	fmt.Println("üß™ Testing RabbitMQ Actions")
	fmt.Println("============================")

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	timestamp := time.Now().Unix()
	username := fmt.Sprintf("user_%d", timestamp)

	testAction("create_user", map[string]interface{}{
		"username": username,
		"password": "password123",
	})

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–Ω—É–∂–µ–Ω user_id)
	testAction("create_list", map[string]interface{}{
		"user_id":     1, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id = 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		"title":       "Test List via RabbitMQ",
		"description": "Created through message queue",
	})

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
	testAction("get_all_lists", map[string]interface{}{
		"user_id": 1,
	})

}

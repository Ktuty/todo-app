basePath: /
definitions:
  handler.createItemV2Request:
    properties:
      description:
        type: string
      idempotency_key:
        type: string
      list_id:
        type: integer
      title:
        type: string
    required:
    - list_id
    - title
    type: object
  handler.createListV2Request:
    properties:
      description:
        type: string
      idempotency_key:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  handler.dependencies:
    properties:
      database:
        type: string
      redis:
        type: string
    type: object
  handler.errorResponse:
    properties:
      message:
        type: string
    type: object
  handler.getAllItemsV2Response:
    properties:
      data:
        items:
          $ref: '#/definitions/todo.TodoItem'
        type: array
      meta:
        $ref: '#/definitions/handler.paginationMeta'
    type: object
  handler.getAllListsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/todo.TodoList'
        type: array
    type: object
  handler.getAllListsV2Response:
    properties:
      data:
        items:
          $ref: '#/definitions/todo.TodoList'
        type: array
      meta:
        $ref: '#/definitions/handler.paginationMeta'
    type: object
  handler.healthResponse:
    properties:
      dependencies:
        $ref: '#/definitions/handler.dependencies'
      status:
        type: string
      system:
        $ref: '#/definitions/handler.systemInfo'
      timestamp:
        type: string
      version:
        type: string
    type: object
  handler.idempotentResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  handler.paginationMeta:
    properties:
      limit:
        type: integer
      page:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  handler.statusResponse:
    properties:
      status:
        type: string
    type: object
  handler.systemInfo:
    properties:
      goroutines:
        type: integer
      memory_mb:
        type: integer
      uptime:
        type: string
    type: object
  handler.todoListV2Response:
    properties:
      archived:
        description: Новое поле для v2
        type: boolean
      color:
        description: Новое поле в v2
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      item_count:
        type: integer
      priority:
        description: Новое поле в v2
        type: integer
      title:
        type: string
      updated_at:
        type: string
    required:
    - title
    type: object
  handler.updateListV2Request:
    properties:
      archived:
        type: boolean
      description:
        type: string
      title:
        type: string
    type: object
  todo.TodoItem:
    properties:
      archived:
        description: Новое поле для v2
        type: boolean
      created_at:
        description: Новое поле для v2
        type: string
      description:
        type: string
      done:
        type: boolean
      id:
        type: integer
      title:
        type: string
      updated_at:
        description: Новое поле для v2
        type: string
    required:
    - title
    type: object
  todo.TodoList:
    properties:
      archived:
        description: Новое поле для v2
        type: boolean
      color:
        description: Новое поле в v2
        type: string
      created_at:
        description: Новое поле для v2
        type: string
      description:
        type: string
      id:
        type: integer
      priority:
        description: Новое поле в v2
        type: integer
      title:
        type: string
      updated_at:
        description: Новое поле для v2
        type: string
    required:
    - title
    type: object
  todo.UpdateItemInput:
    properties:
      archived:
        description: Добавлено для v2
        type: boolean
      description:
        type: string
      done:
        type: boolean
      title:
        type: string
    type: object
  todo.UpdateListInput:
    properties:
      archived:
        description: Добавлено для v2
        type: boolean
      color:
        description: Добавлено для v2
        type: string
      description:
        type: string
      priority:
        description: Добавлено для v2
        type: integer
      title:
        type: string
    type: object
  todo.User:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for TodoList Application with multiple versions, rate limiting
    and idempotency support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Todo App API
  version: "2.0"
paths:
  /api/v1/items/{id}:
    delete:
      consumes:
      - application/json
      description: delete item
      operationId: delete-item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete item
      tags:
      - items
    get:
      consumes:
      - application/json
      description: get item by id
      operationId: get-item-by-id
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.TodoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get item by ID
      tags:
      - items
    put:
      consumes:
      - application/json
      description: update item
      operationId: update-item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.UpdateItemInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update item
      tags:
      - items
  /api/v1/lists:
    get:
      consumes:
      - application/json
      description: get all lists
      operationId: get-all-lists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.getAllListsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all lists
      tags:
      - lists
    post:
      consumes:
      - application/json
      description: create todo list
      operationId: create-list
      parameters:
      - description: list info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.TodoList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create todo list
      tags:
      - lists
  /api/v1/lists/{id}:
    delete:
      consumes:
      - application/json
      description: delete list
      operationId: delete-list
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete list
      tags:
      - lists
    get:
      consumes:
      - application/json
      description: get list by ID
      operationId: get-list-by-id
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.TodoList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get list by ID
      tags:
      - lists
    put:
      consumes:
      - application/json
      description: update list
      operationId: update-list
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: List update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.UpdateListInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update list
      tags:
      - lists
  /api/v1/lists/{id}/items:
    get:
      consumes:
      - application/json
      description: get all items
      operationId: get-all-items
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/todo.TodoItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: create todo item
      operationId: create-item
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: item info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.TodoItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create todo item
      tags:
      - items
  /api/v2/items:
    get:
      consumes:
      - application/json
      description: Get all todo items with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by list ID
        in: query
        name: list_id
        type: integer
      - description: Filter by completion status
        in: query
        name: completed
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.getAllItemsV2Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all items (v2)
      tags:
      - items-v2
    post:
      consumes:
      - application/json
      description: Create todo item with idempotency support
      parameters:
      - description: Item info with idempotency key
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.createItemV2Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.idempotentResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/todo.TodoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create todo item (v2)
      tags:
      - items-v2
  /api/v2/items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete todo item with soft delete
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete item (v2)
      tags:
      - items-v2
    get:
      consumes:
      - application/json
      description: Get todo item by ID with extended information
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.TodoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get item by ID (v2)
      tags:
      - items-v2
    put:
      consumes:
      - application/json
      description: Update todo item with partial update support
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.UpdateItemInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.TodoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update item (v2)
      tags:
      - items-v2
  /api/v2/items/{id}/complete:
    patch:
      consumes:
      - application/json
      description: Mark todo item as completed
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Complete item
      tags:
      - items-v2
  /api/v2/lists:
    get:
      consumes:
      - application/json
      description: Get all todo lists with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by archived status
        in: query
        name: archived
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.getAllListsV2Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all lists (v2)
      tags:
      - lists-v2
    post:
      consumes:
      - application/json
      description: Create todo list with idempotency support
      parameters:
      - description: List info with idempotency key
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.createListV2Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.idempotentResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/todo.TodoList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create todo list (v2)
      tags:
      - lists-v2
  /api/v2/lists/{id}:
    delete:
      consumes:
      - application/json
      description: Delete todo list with soft delete
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete list (v2)
      tags:
      - lists-v2
    get:
      consumes:
      - application/json
      description: Get todo list by ID with extended information including item count
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.todoListV2Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get list by ID (v2)
      tags:
      - lists-v2
    put:
      consumes:
      - application/json
      description: Update todo list with partial update support
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: List update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.updateListV2Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.TodoList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update list (v2)
      tags:
      - lists-v2
  /api/v2/lists/{id}/archive:
    patch:
      consumes:
      - application/json
      description: Archive todo list
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Archive list
      tags:
      - lists-v2
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Sign in user
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Create new user account
      parameters:
      - description: User credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/todo.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Sign up new user
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Check service health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.healthResponse'
      summary: Health check
      tags:
      - health
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
x-extension-openapi:
  example: value
